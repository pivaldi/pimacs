#!/usr/bin/env doomscript
;;; pimacs/default/cli.el --- See README.md -*- lexical-binding: t; -*-
;; Copyright (c) 2024, Philippe Ivaldi <www.piprime.fr>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

:;; Commentary:

;;; Code:

(defun pim-keys-bindings-to-md-refcard (keymapname module)
  "Export the PIMacs key bindings md file.
KEYMAPNAME (string) is the keymap name to export into
the file key-bindings-refcard.md of the module MODULE."
  (require 'which-key)
  (let* (
         (which-key-max-description-length 1000)
         ;; (which-key-show-docstrings t)
         ;; (which-key-show-transient-maps 1)
         (keys (which-key--get-bindings nil (symbol-value (intern keymapname)) nil t))
         (line nil)
         (fname (concat (doom-module-locate-path :pimacs module) "/key-bindings-refcard.md"))
         (pim-regexp "\\(.*\\)#pim *$")
         )
    (with-temp-file fname
      (insert (format "# PIMacs %s bindings\n\n" keymapname))
      (insert "**DO NOT EDIT THIS FILE**, it is auto-generated by the PIMacs cli.\n\n")
      (dolist (key keys)
        (setq line (apply #'format "* `%s`%s%s" key))
        ;; (print! line)
        (when (string-match-p pim-regexp line)
          (insert (concat (s-trim (replace-regexp-in-string pim-regexp "\\1" line)) "\n"))
          )))
    (print! (green (format "Generated file : %s" fname)))
    )
  )

(defun pim-defcli-generate-map-refcard (keymapname module)
  "Dynamically generate PIMacs command cli.
The generated cli is generate-KEYMAPNAME-refcard interpolating KEYMAPNAME."
  (let ((cli-name (intern (format "generate-%s-refcard" keymapname))))
    (defcli! (keys ,cli-name) ()
             "Export into a file the PIMacs key bindings added/modified to/in %s.
If keymap name is not added to the alist 'pim-keymapname-alist`
this cli does nothing." ;; TODO : make it dynamic to include the keymap name.
             ;; (:documentation (format "Export the PIMacs %s key bindings into a file." keymapname))
             (let ((byte-compile-current-file t))
               (require 'doom-start)
               (if (assoc keymapname pim-keymapname-alist)
                   (pim-keys-bindings-to-md-refcard keymapname module)
                 (print! (warn
                          "The keymap %s is not registered in pim-keymapname-alist by %s."
                          keymapname (symbol-name module)))
                 )
               )))
  )

;; (defcli! generate-global-map-refcard ()
;;          "Export the PIMacs global-map key bindings into the file key-bindings-refcard.md of the project."
;;          (let ((byte-compile-current-file t))
;;            (require 'doom-start)
;;            (pim-keys-bindings-to-md-refcard "global-map" 'keys)
;;            )
;;          )

;; Generate global-map keys refcard cli generation for modified keymap bindings.
;; (pim-defcli-generate-map-refcard "global-map" 'keys)

;; Generate at once all keys refcard cli generation for modified keymap bindings.
(defcli! (:root doom +pimacs) () "The Doom PIMacs CLI")
(defcli! (:root doom +pimacs keys) () "Keys related commands")
(defcli! (:root doom +pimacs keys generate-refcard) () ;; TODO : add option to generate all the binding in one file.
         "Export into the files (one by module) all the PIMacs key bindings added/modified."
         (let ((byte-compile-current-file t)
               (keymapname nil)
               (modulename nil)
               )
           (require 'doom-start)
            (dolist (km pim-keymapname-alist)
              (progn
              (setq
               keymapname (car km)
               modulename (cdr km))
              (print! (format "Generating %s key binding from module %s..." keymapname modulename))
              (pim-keys-bindings-to-md-refcard keymapname (intern modulename))
              ))))

(provide 'pimacs/default/cli)

;;; cli.el ends here

;; Local variables:
;; coding: utf-8
;; End:
